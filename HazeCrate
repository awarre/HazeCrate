#!/usr/bin/python3

### REFERENCES ###
# https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/master/docs/steam-compat-tool-interface.md

## STYLE GUIDES
# https://peps.python.org/pep-0008/
# DOCString https://numpydoc.readthedocs.io/en/latest/format.html#notes
# function naming: https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.2
# https://docutils.sourceforge.io/docs/user/rst/quickref.html#inline-markup

import sys
import os
import configparser
import shlex
import argparse
import hashlib
from pathlib import Path

# CONFIGURATION
DEBUG = True
DOSBOX_PATH = 'io.github.dosbox-staging'

# GLOBAL CONSTANTS
HOME = os.path.expanduser("~")
STEAM_APP_ID = str(os.environ.get("STEAM_COMPAT_APP_ID")) 
STEAM_GAME_INSTALL_PATH = str(os.environ.get("STEAM_COMPAT_INSTALL_PATH"))
STEAM_INSTALL_PATH = str(os.environ.get("STEAM_COMPAT_CLIENT_INSTALL_PATH"))
SCRIPT_PATH = str(os.path.dirname(__file__))
DEBUG_LOG_PATH = SCRIPT_PATH + '/debug/debug_' + STEAM_APP_ID + '.log'

if os.path.exists(DEBUG_LOG_PATH):
    os.remove(DEBUG_LOG_PATH)

def write_debug_line(line: str):
    """
    Writes string to debug log.

    Parameters
    ----------
    line : str
        String to log.
    """
    if(DEBUG):
        with open(DEBUG_LOG_PATH, 'a') as f:
            f.write(line + '\n')

def write_new_dosbox_config_line(line: str):
    """
    Writes string as new line to DOSBox auto config file.

    Parameters
    ----------
    line : str
        String to write.
    """
    try:
        with open(autoConfigPath, 'a') as f:
            f.write(line + '\n')
    except Exception as e:
        write_debug_line("Can't save config: " + autoConfigPath + "Exception: " + str(e))

def file_exists_ci(path: str) -> str:
    """
    Case-insensitive check if path exists. Corrects if case does not match actual path.

    Parameters
    ----------
    path : str
        File path to validate.

    Returns
    -------
    str
        Case corrected file path, or empty string if path doesn't exist.
    """
    # If file doesn't exist in the case specified, loop through directory
    if not os.path.exists(path):
        if '/' in path:
            dir = os.path.dirname(path)
        else:
            dir = './'
        for p in os.listdir(dir):
            if str(p).lower() == str(os.path.basename(path)).lower():
                return str(os.path.join(dir, p))
        # No file found?
        return ''
    
    return str(path)

def create_dosbox_autoconf_path(conf_path: str) -> str:
    """
    Determines the location of the DOSBox auto config file, creating any directories needed.

    Parameters
    ----------
    conf_path : str
        Default dosbox.conf path from Steam arguments.

    Returns
    -------
    str
        Returns the path to the new DOSBox auto config file for this game.
    """
    # Base directory
    path = get_new_dosbox_conf_dir(conf_path)
    p = Path(path)
    p.mkdir(parents=True, exist_ok=True)
    # Unique hash for each dosbox config. Some games have several different config options.
    hash = get_dosbox_conf_hash(conf_path)
    path = SCRIPT_PATH + "/configs/" + os.path.basename(STEAM_GAME_INSTALL_PATH) + '/AUTO_' + STEAM_APP_ID + '_' + hash + '.conf'
    write_debug_line('Conf Hash: ' + hash)
    #Cleanup old autogenerated config
    if os.path.exists(path):
        os.remove(path)

    return path

def get_new_dosbox_conf_dir(conf_path: str):
    """
    Determines the base directory for the new game DOSBox config files.

    Parameters
    ----------
    conf_path : str
        Location of the default DOSBox config found from Steam arguments.

    Returns
    -------
    _type_
        Returns the directory where the game's new DOSBox config files will be stored.
    """
    # Game specific config directory
    conf_path = SCRIPT_PATH + "/configs/" + os.path.basename(STEAM_GAME_INSTALL_PATH)
    return conf_path

def update_autoexec_section(conf: list) -> list:
    """
    Converts [autoexec] section from DOSBox config to proper Linux format.

    Parameters
    ----------
    conf : list
        Existing [autoexec] section from default DOSBox config.

    Returns
    -------
    list
        Modified [autoexec] section of config.
    """
    autoexecConf = []
    # Find the [autoexec] section
    for line in conf:
        # If the current line is the [autoexec] header, if we've already found it, and that the line isn't empty
        if(line.lower() == '[autoexec]' or autoexecConf) and line:
            # Stop if we find another section header
            if(line[0] == '[' and line.lower() != '[autoexec]'):
                break
            autoexecConf.append(line)

    # The [autoexec] sections can be an absolute mess, let's try to clean it up.
    for i in range(len(autoexecConf)):
        line = autoexecConf[i]
        # Fix the paths for a Linux environment
        autoexecConf[i] = autoexecConf[i].replace('\\','/')

        # Try to fix the case senstitivity in mount lines...
        if autoexecConf[i].lower().startswith('mount'):
            autoexecConf[i] = update_mount(autoexecConf[i])

        # Try to fix the case senstitivity in imgmount lines...
        if autoexecConf[i].lower().startswith('imgmount'):
            autoexecConf[i] = update_imgmount(autoexecConf[i])
    return autoexecConf

def update_mount(line: str) -> str:
    """
    Updates the mount commmand from default config to work on Linux.

    Parameters
    ----------
    line : str
        Existing mount command.

    Returns
    -------
    str
        Updated mount command.

    Notes
    -------
    `DOSBox MOUNT Command https://www.dosbox.com/wiki/MOUNT`_
    """
    args = shlex.split(line)
    args[2] = convert_mount_command_path_format(args[2])
    line = ' '.join(args)
    return line

def update_imgmount(line: str) -> str:
    """
    Updates the imgmount commmand from default config to work on Linux.

    Parameters
    ----------
    line : str
        Existing imgmount command.

    Returns
    -------
    str
        Updated imgmount command.

    Notes
    -------
    `DOSBox IMGMOUNT Command https://www.dosbox.com/wiki/IMGMOUNT`_
    """
    args = shlex.split(line)
    for i in range(len(args)):
        if str(args[i]).replace('"', '').lower().endswith('.iso'):
            args[i] = convert_mount_command_path_format(args[i])
    line = ' '.join(args)
    return line

def convert_mount_command_path_format(path: str) -> str:
    """
    Resolves case-corrected absolute (img)mount paths.

    Parameters
    ----------
    path : str
        Existing path from command.

    Returns
    -------
    str
        Case-corrected absolute path.
    """
    write_debug_line("Intial Path: " + path)
    pathDirs = (path.replace('"', '')).split('/')
    dir = os.getcwd()
    for d in pathDirs:
        dir = dir + '/' + d
        searchPath = Path(dir)
        dir = file_exists_ci(str(searchPath.resolve()))
    newPath = str(Path(dir).resolve())
    newPath = newPath.replace(str(HOME), '~')
    newPath =  '"' + newPath + '"'
    write_debug_line("Updated Path: " + newPath)
    return newPath

def get_dosbox_conf_hash(path: str) -> str:
    """
    Generates an 8 character hash from a string.

    Parameters
    ----------
    path : str
        String to hash.

    Returns
    -------
    str
        8 character hash string.

    Notes
    -------
    This is used to create unique auto config files for each launch option for the game. Many games include multiple configs/EXEs.
    """
    hash = str(hashlib.sha256(path.encode()).hexdigest())
    hash = hash[-8:]
    return hash

def parse_args(args: list) -> argparse.Namespace:
    """
    Parse DOSBox command line arguments and paths from Steam args

    Parameters
    ----------
    args : list
        Arguments list from sys.argv

    Returns
    -------
    argparse.Namespace
        Returns an argparse Namespace with the DOSBox arguments received from Steam

    Notes
    `DOSBox Command Line Parameters https://www.dosbox.com/wiki/Usage`_
    """
    argParser = argparse.ArgumentParser()
    argParser.add_argument('compatpath', nargs='?', default='')
    argParser.add_argument('--dosbox', nargs='+', default='')
    argParser.add_argument('-conf', help='DOSBox configuration file.', default='/dosbox.conf')
    argParser.add_argument('-exit', action='store_true')
    argParser.add_argument('-c', action='store_true')
    argParser.add_argument('-fullscreen', action='store_true')
    argParser.add_argument('-lang')
    argParser.add_argument('-machine')
    argParser.add_argument('-noconsole', action='store_true')
    argParser.add_argument('-startmapper', action='store_true')
    argParser.add_argument('-noautoexec', action='store_true')
    argParser.add_argument('-securemode', action='store_true')
    argParser.add_argument('-scaler')
    argParser.add_argument('-forcescaler')
    argParser.add_argument('-version', action='store_true')
    argParser.add_argument('-socket')
    argParser.add_argument('-editconf')
    argParser.add_argument('-opencaptures')
    argParser.add_argument('-printconf', action='store_true')
    argParser.add_argument('-eraseconf', action='store_true')
    argParser.add_argument('-erasemapper')
    try:
        results = argParser.parse_args(args)
    except Exception as e:
        write_debug_line('Error parsing arguments ' + str(args))
        write_debug_line('Exception: ' + str(e))
 
    return results

def new_dosbox_command(args: argparse.Namespace) -> str:
    """
    Returns the new DOSBox command to run including new config files.

    Parameters
    ----------
    args : argparse.Namespace
        Namespace will all of the arguments received from Steam.

    Returns
    -------
    str
        Returns the new command to launch the game.
    """
    command = []
    # flatpak run and set filesystem path
    command.append('flatpak run --filesystem="' + SCRIPT_PATH + '" --filesystem="' + STEAM_INSTALL_PATH + '"')
    # DOSBox flatpak to use
    command.append(DOSBOX_PATH)
    # Executable if it was listed
    if len(args.dosbox) > 1:
        exePath = STEAM_GAME_INSTALL_PATH + '/' + (args.dosbox[1]).replace('\\','/')
        exePath = file_exists_ci(exePath)
        command.append(shlex.quote(exePath))
    # New DOSBox config
    command.append("-conf")
    command.append(shlex.quote(autoConfigPath))
    # Make sure we exit DOSBox when the game exits
    command.append("-exit")
    # Create command string from array
    cmdString = str(" ".join(command))

    return(cmdString)

def get_dosbox_conf_global_template() -> list:
    """
    Gives path to DOSBOX config template to override with settings better for Steam Deck

    Returns
    -------
    list
        Returns the template config as a list.
    """
    path = os.path.dirname(__file__) + '/global_dosbox.conf'
    with open(path, 'r') as file:
        lines = file.read()

    return(lines)

def get_dosbox_conf_custom_template(conf_path: str) -> list:
    """
    Returns custom DOSBox config for game

    Parameters
    ----------
    conf_path : str
        Path to existing default DOSBox config file

    Returns
    -------
    list
        Lines of the custom.conf file. Empty string if it doesn't exist.
    """
    path = get_new_dosbox_conf_dir(conf_path) + '/custom.conf'
    if os.path.exists(path):
        write_debug_line("custom.conf found: " + path)
        with open(path, 'r') as file:
            lines = file.read()
    else:
        lines = ''
    
    return(lines)


def get_default_dosbox_conf_path(conf: str) -> str:
    """
    Locate the default DOSBox config and convert it to absolute Linux path.

    Parameters
    ----------
    conf : str
        Path to the DOSBox conf file from Steam arguments.

    Returns
    -------
    str
        Returns Linux path to config file.
    """
    if conf:
        write_debug_line('DOSBox config found: ' + conf)
        path = os.getcwd() + '/' + str(conf).replace('\\','/')
        # Try to make relative path more absolute
        if not STEAM_GAME_INSTALL_PATH in path:
            path = STEAM_GAME_INSTALL_PATH + '/' + path
        path = file_exists_ci(path)
    else:
        write_debug_line('No config found. Is this even a DOSBox game?')
    return path

def get_default_dosbox_conf_data(path: str) -> list:
    """
    Returns the DOSBox conf file as a list of strings.

    Parameters
    ----------
    path : str
        Path to DOSBox config file.

    Returns
    -------
    list
        DOSBox config file lines as list of strings.
    """
    try:
        with open(path, 'r') as file:
            lines = file.read().splitlines()
    except Exception as e:
        write_debug_line("Couldn't open config. Exception: " + str(e))

    return lines

def create_auto_dosbox_conf(path: str):
    """
    Creates new DOSBox configuration file for game based on existing configs.

    Parameters
    ----------
    path : str
        Path to default DOSBox config file.

    Notes
    ----------
    DOSBox config file order of precedence (higher overrides lower): 
    Custom (per-game custom config) > Global Template (default included with HazeCrate) > Default (included with game)

    `DOSBox.conf https://www.dosbox.com/wiki/Dosbox.conf`_
    `DOSBox-staging Config file examples https://github.com/dosbox-staging/dosbox-staging/wiki/Config-file-examples`_

    """
    config = configparser.ConfigParser()
    configData = get_default_dosbox_conf_data(path)
    autoexec = update_autoexec_section(configData)
    # Parse the game's included dosbox config
    try:
        config.read(path)
    # Usually exceptions are [autoexec] errors since configParser doesn't like the format.
    except Exception as e:
        write_debug_line("Couldn't parse config. Exception: " + str(e))

    # Global config template will apply baseline settings.
    templateDosboxConf = get_dosbox_conf_global_template()
    config.read_string(templateDosboxConf)

    # Override included and global dosbox configs with custom settings
    customDosboxConf = get_dosbox_conf_custom_template(path)
    config.read_string(customDosboxConf)

    # Delete the [autoexec] section. We handle it separately
    config.remove_section('autoexec')

    # Save modified config
    for section in config.sections():
        write_new_dosbox_config_line('[' + section + ']')
        for (key, val) in config.items(section):
            write_new_dosbox_config_line(key + '=' + val)

    # Save [autoexec] section
    for line in autoexec:
        write_new_dosbox_config_line(line)

def main():
    global autoConfigPath
    write_debug_line('APP ID: ' + STEAM_APP_ID)
    write_debug_line('INSTALL PATH: ' + STEAM_GAME_INSTALL_PATH)
    write_debug_line('HAZECRATE PATH: ' + SCRIPT_PATH)  
    write_debug_line('Args: ' + str(sys.argv))

    args = parse_args(sys.argv)
    devConfigPath = get_default_dosbox_conf_path(args.conf)
    autoConfigPath = create_dosbox_autoconf_path(args.conf)
    write_debug_line("Autoconfig path: " + autoConfigPath)
    create_auto_dosbox_conf(devConfigPath)
    cmd = new_dosbox_command(args)
    write_debug_line('CMD: ' + cmd)
    os.system(cmd)

if __name__ == "__main__":
    main()
